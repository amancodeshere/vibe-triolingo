// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  level     Int      @default(1)
  experience Int     @default(0)
  streak    Int      @default(0)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments Enrollment[]
  progress    Progress[]
  achievements Achievement[]
  sessions    Session[]

  @@map("users")
}

model Language {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  flag        String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  enrollments Enrollment[]
  lessons     Lesson[]

  @@map("languages")
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  languageId String
  level      Int      @default(1)
  isActive   Boolean  @default(true)
  startedAt  DateTime @default(now())
  completedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@unique([userId, languageId])
  @@map("enrollments")
}

model Lesson {
  id          String   @id @default(cuid())
  languageId  String
  title       String
  description String?
  order       Int
  difficulty  String   @default("beginner") // beginner, intermediate, advanced
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  exercises Exercise[]
  progress  Progress[]

  @@map("lessons")
}

model Exercise {
  id          String   @id @default(cuid())
  lessonId    String
  type        String   // multiple_choice, fill_blank, translation, listening
  question    String
  correctAnswer String
  options     String[] // For multiple choice
  explanation String?
  order       Int
  points      Int      @default(10)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("exercises")
}

model Progress {
  id         String   @id @default(cuid())
  userId     String
  lessonId   String
  enrollmentId String
  completed  Boolean  @default(false)
  score      Int      @default(0)
  timeSpent  Int      @default(0) // in seconds
  completedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson     Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("progress")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String   // streak, level_up, lesson_complete, perfect_score
  title       String
  description String
  icon        String?
  unlockedAt  DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
